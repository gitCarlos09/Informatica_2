Jhanth Carlo Castillo Perez

--- Relatoria ---


Jueves, 16 de Febrero del 2023

CONFIGURACION Visual - Git - Github

Visual studio code es una aplicacion para programar de una manera sencilla,con una interfaz
simple y practica, ademas de poder conectarse con github, una pagina donde se puede subir los 
trabajos realizados en visual studio code ya sea en lenguaje de programacion Python
u otros, incluso otras personas pueden ver los trabajos realizados en github.visual ademas
tiene extensiones para facilitar la programacion.

1) Instalar:
    - Visual Studio Code
    - Git 
    - Python

2) Crear cuenta en la pagina oficial github

3) configurar git en Visual Studio code
    se ejecuta en la terminal:
    - git config --global user.name "gitCarlos09"
    - git config --global user.email "jhcastillop@unal.edu.co"

4) Crear repositorio local
    - creamos una carpeta llamada INFORMATICA_2
    - Crear subcarpetas CLASES, EJERCICIOS, INFORMES
    - Ir al icono source code, clickeamos + y luego clickeamos el boton commit con un mensaje.

5) Sincronizar el repositorio local en la nube
    - Clickeamos el boton <publish branch>
    - Automaticamente se abre una pestaña en gitHub en la cual autorizamos subir el repositorio a la nube


Martes, 21 de Febrero del 2023

-----IMPRESION DE INFORMACION-----

Python utiliza la instruccion print para imprimir en la terminal cualquier tipo de informacion.

Ejemplo: Imprimir la cadena 
         "hola mundo"

>> print("hola mundo")

------Tipos de datos basicos-----

Enteros:-99, 100, 1000
Cadenas: "Hola", informatica2", "-·$%&"
Booleanos: True, False
Flotantes: 12.4   9090.99  -12.91

-----Datos estructurados -----

Listas: [1,2,3,4,5]
Tuplas: (1,2,3,4,5)
Diccionarios: {"one": 1, "two": 2, "three": 3}


Jueves, 23 de Febrero del 2023

-----Operaciones en python-----

Asignacion   a = 1
             b = "dfsaf"
             c = [12,3,5]

Algebraicas: + - * Suma, resta, multiplicacion
             /     Division 
             //    Division entera
             %     Residuo
             **    Potenciacion o raiz

Comparacion  1 == 2    Devuelve False
             3 > 5     Devuelve False
             4 >= 4    Devuelve True
             3 < 3     Devuelve False
            -5 <= 0    Devuelve True
             3 != 2    Devuelve True

Lógicos      and      True and False  => Devuelve False
             or       False or True   => Devuelve True 
             not      not True        => Devuelve False

Pertenencia  1 in [1,2,3,4]       Devuelve True
             1 not in [1,2,3,4]   Devuelve False


Martes, 28 de Febrero del 2023

-----Funciones integradas de python-----
         funciones built-in  

Son funciones integradas en python o tambien conocidas como funciones built-in

Entrada y salida:  input(), print()
Ayuda:             help(), dir(), type()
Conversiones:      int(), float(), bool()
                   list(), tuple(), dict()
                   set(), complex()

                   bin(), hex(), oct(), int()

Secuencias:        range(), enumerate()

Operaciones con    len(), sum(), min(), max(), sorted()...
secuencias


Martes, 07 de Marzo del 2023

----- Condicional IF -----

Es una de las sentencias básicas en Python. 
Si una condición es verdadera , las instrucciones siguientes serán ejecutadas. 
En caso contrario deben ser evaluadas las condiciones en otros casos. 

La sintaxis es la siguiente: 

if <condición>:
    <sentencias>
else: 
    <sentencias>

if <condición>:
    <sentencias>
elif <condición2>:
    <sentencias>
elif <condición3>:
    <sentencias>
else
    <sentencias>

Ejemplo: utilice una edad arbitraria. Luego determine:
         Si la edad corresponde a una persona mayor de edad o no.

if (edad >= 18):
    print("La persona es mayor de edad")
else:
    print("La persona es menor de edad")


Jueves, 09 de Marzo del 2023

----- Ciclo While -----

Es semejante al condicional if.
Si la condicion es verdadera, se ejecuta las sentencias dentro del while.

Además se re-evalua la condición hasta que se hace falsa y el ciclo termina.

---------Sintaxis-----------
-----------------
while <condicion>:
    <sentencias>
-----------------
while <condicion>:
    <sentencias>
else:
    <sentencias>
-----------------

---------- EJEMPLOS-----------------
Ejemplo1: Ejecutar un ciclo while infinito

#Lo siguiente podría bloquear su equipo

condicion = True
while condicion:
    print("estoy corriendo")

Ejemplo 2: ¿cómo protegerme de un ciclo infinito?

condicion = True
proteccion = 0
while condicion:
    print("Estoy corriendo en el ciclo => ", proteccion)
    proteccion = proteccion + 1
    if proteccion >= 200: